
	Model - where we describe the data of a feature
	View - where we present the data for a feature
	Controller - where we compose our data and it's presentation through some business logic


	npm init -y
	npm install express
	npm install body-parser
	npm install method-override
	npm install ejs
	npm install sequelize pg pg-hstore
	touch .gitignore

	mkdir db
	  -connection.js
	  -migrate.js
	  -seed.js
	  -seed.json
 	mkdir models
	  -Todo.js

 	mkdir views 
	  -partials
	     -header.ejs
	  -index.ejs                                              
	  -show.ejs
	  -edits.ejs
	  -new.ejs
	mkdir controllers
	  -todos.js
	mkdir public
	  -style.css

	index.js


	psql -U postgres
	CREATE DATABASE restaurants
	GRANT ALL PRIVILEGES ON database yum TO inclassuser
	\q



	Index.js
	
	const express = require('express');
	const parser = require('body-parser');
	const methodOverride = require('method-override');
	const app = express();

	const todosController = require('./controllers/todos');

	app.set('view engine', 'ejs');
	app.use(parser.urlencoded({extended: true}));
	app.use('/', todosController);
	app.use(methodOverride('_method'));
	app.use(express.static(__dirname + "/public"));


	app.listen(3000, () => {
    	console.log('Running on port 3000');
	});
	

	db/connection.js

	const Sequelize = require('sequelize');
	const sequelize = new Sequelize('todos', 'inclassuser','Hartford1810', {
	host: 'localhost',
	dialect: 'postgres',
	operatorsAliases: false
	});

	const Todos = sequelize.import('../models/Todo');

	sequelize.authenticate().then(() => {
   	 console.log('connected to the database')
	});

	module.exports = {
   	 Sequelize,
    	sequelize,
    	Todos
	};





	db/migrate.js

	const connection = require('./connection');
	connection.sequelize.sync({force: true}).then(() => {
    	console.log('migrated');
    	process.exit();
	});





	db/seed.js

	const connection = require("./connection");
	const seedData = require("./seed.json");

	connection.Todos.destroy({ where: {} })
  	.then(() => {
    	connection.Todos.bulkCreate(seedData).then(() => {
        process.exit();
  	})
  
  	});






	model/Todo.js

	module.exports = function (sequelize, 	DataTypes) {
	return sequelize.define('todo', {
    	title: DataTypes.STRING,
    	complete: DataTypes.BOOLEAN
	});
	};
	


	controllers/todos.js

	const express = require("express");
	const router = express.Router();
	const Todo = require("../db/connection").Todos;

	router.get("/", (req, res) => {
  	Todo.findAll()
    	.then(todos => {
     	 res.render("index", { todos: todos });
    	})
    	.catch(err => console.error(err));
	});

	router.get("/new", (req, res) => {


  	res.render("new");
	});

	router.get("/:id", (req, res) => {
  	//Todo.find({where: {id: req.params.id}})
  	Todo.findById(req.params.id).then(todo => {
    	res.render("show", { todo });
  	});
	});

	router.get("/edit/:id", (req, res) => {
  	Todo.findById(req.params.id).then(todo => {
    	res.render("edit", { todo });
  	});
	});

	router.post("/", (req, res) => {
  	Todo.create(req.body).then(() => {
    	res.redirect("/");
  	});
	});

	

	router.put("/:id", (req, res) => {
    	req.body.complete = req.body.complete ? true : false;
    	Todo.findById(req.params.id)
      	.then(todo => {
        return todo.updateAttributes(req.body);
      	})
      	.then(todo => {
        res.redirect("/");
     	 });
   	});

	router.delete("/:id", (req, res) => {
    	Todo.findById(req.params.id)
     	 .then(todo => {
        todo.destroy();
      	})
      	.then(() => {
        res.redirect("/");
      	});
  	});

	module.exports = router;





	views/index.ejs

	<h1>Hello</h1>

	<ul>
    	<% todos.forEach((todo) => { %>
	<li>
    	<a href="/ <%= todo.id %>"><%= todo.title %></a>
	</li>

	<%}) %>
	</ul>




	view/show.ejs

	<h1><%=todo.title %></h1>





	view/new.ejs

	<h2>New To Do:</h2>

	<form action="/" method="post" accept-charset="utf-8">
  	<p>
    	<label>Title:</label>
    	<input type="text" value="" name="title" id=""/>
  	</p>
  	<input type="submit" value="Create" />
	</form>


	



	view/edit.ejs

	<h2>Edit To Do:</h2>

	<form action="/<%= todo.id %>?_method=put" method="post">
 	 <p>
   	 <label>Title:</label>
    	<input type="text" value="<%= todo.title %>" name="title"/>
 	 </p>
  	<p>
   	 <label>Complete:</label>
    	<% if (todo.complete) { %>
      	<input type="checkbox" name="complete" checked/>
    	<% } else { %>
      	<input type="checkbox" name="complete"/>
    	<% } %>
  	</p>
  	<input type="submit" value="Update" />
	</form>

	<form action="/<%= todo.id %>?_method=delete" method="post">
    	<input type="submit" value="Remove">
  	</form>

	

	header - <% include partials/header %>


	